require "assets/libs/button"
require "assets/libs/server"
require "assets/libs/game"
require "assets/libs/scroll_menu"



function init(self)
	msg.post(".", "acquire_input_focus")
	
	button.reset()
	button.add("back button", "back", go_back_to_main)

	scroll_menu.add("players label", "players")
	
	name_node = gui.get_node("lobby name")
	width_node = gui.get_node("map width")
	height_node = gui.get_node("map height")
	privacy_node = gui.get_node("privacy")
	session_type_node = gui.get_node("session type")
	ready_button = gui.get_node("ready button")
	not_ready_button = gui.get_node("not ready button")
	start_button = gui.get_node("start button")
	
	
	gui.set_text(name_node, CurLobby["name"])
	gui.set_text(width_node, CurLobby["map_width"])
	gui.set_text(height_node, CurLobby["map_height"])
	gui.set_text(privacy_node, CurLobby["privacy"])
	gui.set_text(session_type_node, CurLobby["session_type"])


	if Account["name"] == CurLobby["players"][1]["name"] then
		gui.set_enabled(start_button, true)
		gui.set_enabled(ready_button, false)
		button.add("start button", "start", start_lobby)
	else
		button.add("ready button", "ready", set_ready, self)
		button.add("not ready button", "not_ready", set_not_ready, self)
	end


	timer.delay(5, true, function () server.get("get_lobby_info", update_lobby) end)
	update_players()
	
	--timer.delay(5, true, function () print(1) server.get("get_lobby_info", update_lobby) end)
end



function start_lobby()
	--server.post("start_game")
	game.create_game_instance(CurLobby["name"], CurLobby["privace"], CurLobby["session_type"], #CurLobby["players"], CurLobby["map_width"], CurLobby["map_height"])
	msg.post("main:/loader#loader", "load_collection",{["proxy"] = "game_proxy"})
	msg.post("main:/loader#loader", "unload_collection",{["proxy"] = "lobby_menu_proxy"})
end




function create_game_instance()
	create_map()


end



function update_lobby(self, id, response)
	if response.status == 200 and response.response ~= '"failed"' then
		response = json.decode(response.response)
		if response then
			CurLobby = response
			pprint(CurLobby)
			update_players()
		end
	end

end



function update_players()
	local players = json.decode(json.encode(CurLobby["players"]))

	for k, player in pairs(players) do
		if player["is_ready"] then
			player["is_ready"] = "X"
		else
			player["is_ready"] = nil
		end
	end

	scroll_menu.update_content("players", players)
end



function set_ready(self)
	gui.set_text(self.player_nodes[1]["ready_node"], "X")
	server.post("set_ready")
	self.is_ready = true
	gui.set_enabled(not_ready_button, true)
	gui.set_enabled(ready_button, false)
end



function set_not_ready(self)
	gui.set_text(self.player_nodes[1]["ready_node"], "")
	server.post("set_not_ready")
	self.is_ready = false
	gui.set_enabled(not_ready_button, false)
	gui.set_enabled(ready_button, true)
end



function go_back_to_main()
	server.post("leave_lobby")
	msg.post("main:/loader#loader", "load_collection",{["proxy"] = "main_menu_proxy"})
	msg.post("main:/loader#loader", "unload_collection",{["proxy"] = "lobby_menu_proxy"})
end




function on_input(self, action_id, action)
	if not action_id then
		return
	end

	button.on_input(action_id, action)
	scroll_menu.on_input(action_id, action)
end
