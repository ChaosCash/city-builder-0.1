function init(self)
	self.current_zoom = 1
	self.zoom_step_size = 0.1
	self.max_zoom = 2
	self.min_zoom = 0.5
	self.move_speed = 10
	self.min_x_pos = 0
	self.min_y_pos = 0
	
	
	msg.post("#", "acquire_input_focus")
	msg.post("@render:", "use_camera_projection")
	msg.post("#camera", "acquire_camera_focus")
end

function on_input(self, action_id, action)
	if action_id == hash("zoom_in") then
		if self.current_zoom + self.zoom_step_size <= self.max_zoom then
			self.current_zoom = self.current_zoom + self.zoom_step_size
			camera.set_orthographic_zoom("#camera", self.current_zoom)
		end
	elseif action_id == hash("zoom_out") then
		if self.current_zoom - self.zoom_step_size >= self.min_zoom then
			self.current_zoom = self.current_zoom - self.zoom_step_size
			camera.set_orthographic_zoom("#camera", self.current_zoom)
		end
	elseif action_id == hash("move_up") then
		local pos = go.get_position()
		if pos.y + self.move_speed <= self.max_y_pos then
			go.set_position(vmath.vector3(pos.x, pos.y + self.move_speed, pos.z))
		end
	elseif action_id == hash("move_down") then
		local pos = go.get_position()
		if pos.y - self.move_speed >= self.min_y_pos then
			go.set_position(vmath.vector3(pos.x, pos.y - self.move_speed, pos.z))
		end
	elseif action_id == hash("move_left") then
		local pos = go.get_position()
		if pos.x - self.move_speed >= self.min_x_pos then
			go.set_position(vmath.vector3(pos.x - self.move_speed, pos.y, pos.z))
		end
	elseif action_id == hash("move_right") then
		local pos = go.get_position()
		if pos.x + self.move_speed <= self.max_x_pos then
			go.set_position(vmath.vector3(pos.x + self.move_speed, pos.y, pos.z))
		end
	end
end



function on_message(self, message_id, message, sender)
	if message_id == hash("sending_map_size") then
		self.max_x_pos = message[1] * message[3]
		self.max_y_pos = message[2] * message[3]
	end
end